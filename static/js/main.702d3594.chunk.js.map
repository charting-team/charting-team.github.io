{"version":3,"sources":["components/Navigation/Navigation.js","components/ManyVSMany/MultiForm/MultiForm.js","components/ManyVSMany/MultiTable/TableRow/TableRow.js","components/ManyVSMany/MultiTable/MultiTable.js","services/multi-data/statTesting.js","services/multi-data/handleRawData.js","services/multi-data/appendLetters.js","services/multi-data/finalData.js","containers/multi-test/MultiTest.js","components/OneVSOne/SingleForm/SingleForm.js","components/OneVSOne/SingleTable/TableRow/TableRow.js","components/OneVSOne/SingleTable/SingleTable.js","services/single-data/statTesting.js","services/single-data/handleRawData.js","services/single-data/dataObject.js","services/single-data/finalData.js","containers/single-test/SingleTest.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","react_default","a","createElement","react_router_dom","exact","to","MultiForm","props","onSubmit","formSubmited","className","htmlFor","id","name","onChange","formChanges","defaultValue","value","type","required","placeholder","rows","TableRow","key","idx","driverValue","percentsValues","map","r","i","sigStyles","s","length","onMouseOver","showStatTest","onMouseLeave","hideStatTest","MultiTable","_useState","useState","_useState2","Object","slicedToArray","styles","setStyles","showSigLetters","event","alphabet","data","sequence","rowSelected","columnSelected","target","cellIndex","targetRow","testedPercents","targetLetter","String","fromCharCode","stylesArray","includes","push","hideSigLetters","bases","b","lowBase","st","MultiTable_TableRow_TableRow","bind","drivers","StatTesting","60%","70%","80%","85%","90%","95%","98%","99%","99.8%","99.9%","base1","base2","perc1","perc2","letterForColumn","confScore","P","Q","Math","abs","sqrt","HandleRawData","conf","confidenceLevels","basesArray","split","x","replace","y","round","driversArray","filter","percents","percentsArray","isPercentsBasedFile","percentsMatrix","test","trim","AppendLetters","testing","resultMatrix","row","result","col","str","c","calcStatTest","parseFloat","toFixed","FinalData","handleRawData","fineConf","handleConf","fineBases","handleBases","fineDrivers","handleDrivers","finePercents","handlePercents","letters","addStatLetters","generateAlphabet","MultiTest","setConf","_useState3","_useState4","setBases","_useState5","_useState6","setDrivers","_useState7","_useState8","setPercents","_useState9","valid","_useState10","isValid","setisValid","_useState11","_useState12","setData","ManyVSMany_MultiForm_MultiForm","preventDefault","wholeData","DataService","processData","ManyVSMany_MultiTable_MultiTable","SingleForm","prevValue","statColor","currValue","SingleTable","prevBase","currBase","OneVSOne_SingleTable_TableRow_TableRow","driver","base","Number","currDrivers","DataObject","prevDrivers","prevPercents","currPercents","finalDataObject","targetIndex","indexOf","tempObj","statTesting","finePrevBase","handleBase","prevBases","fineCurrBase","currBases","finePrevDrivers","fineCurrDrivers","finePrevPercents","fineCurrPercents","generateData","SingleTest","setPrevBases","setCurrBases","setPrevDrivers","setCurrDrivers","setPrevPercents","_useState13","_useState14","setCurrPercents","_useState15","_useState16","_useState17","_useState18","OneVSOne_SingleForm_SingleForm","OneVSOne_SingleTable_SingleTable","App","components_Navigation_Navigation","react_router","path","component","Boolean","window","location","hostname","match","app","src_App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.702d3594.chunk.js","sourcesContent":["import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport './Navigation.css';\r\n\r\nconst Navigation = () => {\r\n\r\n    return (\r\n        <header>\r\n            <nav>\r\n                <ul>\r\n                    <li>\r\n                        <NavLink exact to=\"/\">One vs One</NavLink>\r\n                    </li>\r\n                    <li>\r\n                        <NavLink to=\"/many-vs-many\">Many vs Many</NavLink>\r\n                    </li>\r\n                </ul>\r\n            </nav>\r\n        </header>\r\n    )\r\n};\r\n\r\nexport default Navigation;\r\n","import React from 'react';\r\nimport './MultiForm.css';\r\n\r\nconst MultiForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.formSubmited} className=\"MultiForm\">\r\n            <div className=\"form-field\">\r\n                <label htmlFor=\"confidence\">Confidence Level</label>\r\n                <select id=\"confidence\" name=\"conf\" onChange={props.formChanges} defaultValue=\"95%\">\r\n                    <option value=\"60%\">60%</option>\r\n                    <option value=\"70%\">70%</option>\r\n                    <option value=\"80%\">80%</option>\r\n                    <option value=\"85%\">85%</option>\r\n                    <option value=\"90%\">90%</option>\r\n                    <option value=\"95%\">95%</option>\r\n                    <option value=\"98%\">98%</option>\r\n                    <option value=\"99%\">99%</option>\r\n                    <option value=\"99.8%\">99.8%</option>\r\n                    <option value=\"99.9%\">99.9%</option>\r\n                </select>\r\n            </div>\r\n\r\n            <div className=\"form-field\">\r\n                <input \r\n                    type=\"text\" \r\n                    name=\"bases\" \r\n                    onChange={props.formChanges}\r\n                    required \r\n                    placeholder=\"Base sizes\"></input>\r\n            </div>\r\n\r\n            <div className=\"form-field\">\r\n                <textarea \r\n                    rows=\"3\" \r\n                    name=\"drivers\" \r\n                    onChange={props.formChanges}\r\n                    placeholder=\"Drivers/Statements\"></textarea>\r\n            </div>\r\n\r\n            <div className=\"form-field\">\r\n                <textarea rows=\"5\" name=\"percents\" onChange={props.formChanges} required placeholder=\"Percent values\"></textarea>\r\n            </div>\r\n\r\n            <div className=\"form-field\">\r\n                <button>Calculate</button>\r\n            </div>   \r\n        </form>\r\n    )\r\n}\r\n\r\nexport default MultiForm;\r\n","import React from 'react';\r\nimport './TableRow.css';\r\n\r\nconst TableRow = (props) => {\r\n    return (\r\n        <tr>\r\n            <td key={props.idx}>{props.driverValue || \"<->\"}</td>\r\n            { \r\n                props.percentsValues.map((r, i) => {\r\n                    if (props.sigStyles.s.length > 0) {\r\n                        return <td \r\n                                key={i} \r\n                                className={props.sigStyles.s[i]} \r\n                                onMouseOver={props.showStatTest}\r\n                                onMouseLeave={props.hideStatTest}\r\n                                >{r}</td>;\r\n                    } else {\r\n                        return <td \r\n                                key={i} \r\n                                onMouseOver={props.showStatTest}\r\n                                onMouseLeave={props.hideStatTest}\r\n                                >{r}</td>;\r\n                    }\r\n                })\r\n            }\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default TableRow;\r\n","import React, { useState } from 'react';\r\nimport './MultiTable.css'\r\n\r\nimport TableRow from './TableRow/TableRow';\r\n\r\nconst MultiTable = (props) => {\r\n    const [styles, setStyles] = useState({\r\n        s: [],\r\n        i: null\r\n    });\r\n\r\n    const showSigLetters = (i, event) => {\r\n        let alphabet = props.data.data.sequence;\r\n        let rowSelected = i;\r\n        let columnSelected = event.target.cellIndex - 1;\r\n\r\n        let targetRow = props.data.data.testedPercents[rowSelected];\r\n        let targetLetter = String.fromCharCode(65 + columnSelected)\r\n        \r\n        let stylesArray = [];\r\n        for (let i = 0; i < targetRow.length; i++) {\r\n            if (targetRow[i].includes(targetLetter)) {\r\n                stylesArray.push('green');\r\n            } else if (targetRow[columnSelected].includes(alphabet[i])) {\r\n                stylesArray.push('red');\r\n            } else {\r\n                stylesArray.push('yellow');\r\n            }\r\n        }\r\n        setStyles({\r\n            s: stylesArray,\r\n            i: rowSelected\r\n        });\r\n    }\r\n\r\n    const hideSigLetters = (event) => {\r\n        setStyles({\r\n            s: [],\r\n            i: null\r\n        });\r\n    }\r\n\r\n    return (\r\n        <table className=\"MultiTable\">\r\n            <thead>\r\n                <tr>\r\n                    <th>Drivers</th>\r\n                    { props.data.data.bases.map((b, i) => {\r\n                            let lowBase = false;\r\n                            if (b < 50) {\r\n                                b = b + \" *\";\r\n                                lowBase = true;\r\n                            }\r\n                            return <th key={i} className={lowBase ? 'lowbase' : null}>{b}</th>\r\n                        })\r\n                    }\r\n                </tr>\r\n                <tr>\r\n                    <th>Stat letters</th>\r\n                    { props.data.data.sequence.map((s, i) => <th key={i}>{s}</th>) }\r\n                </tr>\r\n            </thead>\r\n\r\n            <tbody>\r\n                { props.data.data.testedPercents.map((r, i) => {\r\n                    let st = {}\r\n                    if (styles.i === i) {\r\n                        st = styles;\r\n                    } else {\r\n                        st.s = [];\r\n                    }\r\n                    \r\n                    return (\r\n                        <TableRow\r\n                            key={i}\r\n                            showStatTest={showSigLetters.bind(this, i)}\r\n                            hideStatTest={hideSigLetters}\r\n                            sigStyles={st}\r\n                            driverValue={props.data.data.drivers[i]}\r\n                            percentsValues={r}\r\n                            idx={i}\r\n                        />\r\n                    )\r\n                }) }\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\nexport default MultiTable;\r\n","class StatTesting {\r\n    confidenceLevels() {\r\n        return {\r\n            '60%': 0.842,\r\n            '70%': 1.036,\r\n            '80%': 1.282,\r\n            '85%': 1.44,\r\n            '90%': 1.645,\r\n            '95%': 1.96,\r\n            '98%': 2.326,\r\n            '99%': 2.576,\r\n            '99.8%': 3.091,\r\n            '99.9%': 3.291,\r\n        }\r\n    }\r\n\r\n    calcStatTest(base1, base2, perc1, perc2, letterForColumn, confScore) {\r\n        let P = ((base1 * perc1) + (base2 * perc2)) / (base1 + base2);\r\n        let Q = 1 - P;\r\n        let Z = Math.abs((perc1 - perc2) / Math.sqrt(P * Q * ((1 / base1) + (1 / base2))));\r\n        if (Z > confScore) {\r\n            \r\n            if (perc1 > perc2) {\r\n                return String.fromCharCode(65 + letterForColumn)\r\n            } else {\r\n            return \"\"\r\n            }\r\n        }\r\n        else {\r\n            return \"\"\r\n        }\r\n    }\r\n}\r\n\r\nexport default StatTesting;\r\n","import StatTesting from './statTesting';\r\n\r\nclass HandleRawData {\r\n    handleConf(conf) {\r\n        let confidence = new StatTesting();\r\n        let level = confidence.confidenceLevels()[conf.conf];\r\n        return level;\r\n    }\r\n\r\n    handleBases(bases) {\r\n        let basesArray = bases.bases.split(/\\t+/g);\r\n        basesArray = basesArray.map(x => x.replace(/[^\\d.]+/g, '')).map(y => Math.round(+y));\r\n        return basesArray;\r\n    }\r\n\r\n    handleDrivers(drivers) {\r\n        // drivers are provided optional so check if available\r\n        if (!drivers.drivers) {\r\n            return \"\";\r\n        }\r\n        let driversArray = drivers.drivers.split(/\\n/g);\r\n        driversArray = driversArray.filter(x => x !== '');\r\n        return driversArray;\r\n    }\r\n\r\n    handlePercents(percents) {\r\n        let percentsArray = percents.percents.split(/\\n/g);\r\n        percentsArray = percentsArray.filter(x => x !== '');\r\n\r\n        // check if the source data includes '%' sign and get only them if yes\r\n        let isPercentsBasedFile = percentsArray.filter(x => x.includes('%')).length > 0 ? true : false;\r\n        if (isPercentsBasedFile) {\r\n            percentsArray = percentsArray.filter(x => x.includes('%'));\r\n        } else {\r\n            percentsArray = percentsArray.filter(x => /\\d/.test(x));\r\n        }\r\n\r\n        // create matrix and remove '%' symbol\r\n        let percentsMatrix = percentsArray.map(x => x.split(/\\t+/g).map(y => y.replace(/[%]/g, '').trim()));\r\n        // replace '-' only cells and map to number\r\n        percentsMatrix = percentsMatrix.map(x => x.map(y => {\r\n            if (y === '-') {\r\n                y = -100;\r\n            } else {\r\n                y /= 100;\r\n            }\r\n            y = +y;\r\n            return y;\r\n        }));\r\n\r\n        return percentsMatrix;\r\n    }\r\n}\r\n\r\nexport default HandleRawData;\r\n","import StatTesting from './statTesting';\r\n\r\nclass AppendLetters {\r\n    addStatLetters(conf, bases, percents) {\r\n        let testing = new StatTesting();\r\n\r\n        let resultMatrix = [];\r\n        for (let row = 0; row < percents.length; row++) {\r\n\r\n            let result = [];\r\n            for (let col = 0; col < percents[0].length; col++) {\r\n                let str = '';\r\n                for (let c = 0; c < percents[0].length; c++) {\r\n                    if (col === c) {\r\n                        continue;\r\n                    }\r\n                    str += testing.calcStatTest(bases[col], bases[c], percents[row][col], percents[row][c], c, conf);\r\n                }\r\n                if (percents[row][col] === -100) {\r\n                    result.push('-')\r\n                } else {\r\n                    result.push(parseFloat((percents[row][col] * 100).toFixed(5)) + '% ' + str);\r\n                }\r\n            }\r\n            resultMatrix.push(result);\r\n        }\r\n        \r\n        return resultMatrix;\r\n    }\r\n\r\n    generateAlphabet(bases) {\r\n        return bases.map((x, i) => String.fromCharCode(65 + i));\r\n    }\r\n}\r\n\r\nexport default AppendLetters;\r\n","import HandleRawData from './handleRawData';\r\nimport AppendLetters from './appendLetters';\r\n\r\nclass FinalData {\r\n    processData(conf, bases, drivers, percents) {\r\n        let handleRawData = new HandleRawData();\r\n        let fineConf = handleRawData.handleConf(conf);\r\n        let fineBases = handleRawData.handleBases(bases);\r\n        let fineDrivers = handleRawData.handleDrivers(drivers);\r\n        let finePercents = handleRawData.handlePercents(percents);\r\n        \r\n        let letters = new AppendLetters();\r\n        let withLetters = letters.addStatLetters(fineConf, fineBases, finePercents);\r\n        let lettersSequence = letters.generateAlphabet(fineBases);\r\n        \r\n        return {\r\n            bases: fineBases,\r\n            drivers: fineDrivers,\r\n            testedPercents: withLetters,\r\n            sequence: lettersSequence\r\n        }\r\n    }\r\n}\r\n\r\nexport default FinalData;\r\n","import React, { useState } from 'react';\r\nimport './MultiTest.css';\r\n\r\nimport MultiForm from '../../components/ManyVSMany/MultiForm/MultiForm';\r\nimport MultiTable from '../../components/ManyVSMany/MultiTable/MultiTable'\r\nimport DataService from '../../services/multi-data/finalData';\r\n\r\nconst MultiTest = () => {\r\n    const [conf, setConf] = useState({\r\n        conf: \"95%\"\r\n    });\r\n    const [bases, setBases] = useState({\r\n        bases: \"\"\r\n    });\r\n    const [drivers, setDrivers] = useState({\r\n        drivers: \"\"\r\n    });\r\n    const [percents, setPercents] = useState({\r\n        percents: \"\"\r\n    });\r\n    const [isValid, setisValid] = useState({\r\n        valid: false\r\n    });\r\n    const [data, setData] = useState({\r\n        data: {}\r\n    });\r\n\r\n    const handleChange = (event) => {\r\n        if (event.target.name === \"conf\") {\r\n            setConf({\r\n                conf: event.target.value\r\n            });\r\n        } else if (event.target.name === \"bases\") {\r\n            setBases({\r\n                bases: event.target.value\r\n            });\r\n        } else if (event.target.name === \"drivers\") {\r\n            setDrivers({\r\n                drivers: event.target.value\r\n            });\r\n        } else if (event.target.name === \"percents\") {\r\n            setPercents({\r\n                percents: event.target.value\r\n            });\r\n        }\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        let dataService = new DataService();\r\n        let wholeData = dataService.processData(conf, bases, drivers, percents);\r\n        setisValid({ valid: true });\r\n        setData({data: wholeData})\r\n    }\r\n\r\n    return (\r\n        <section className=\"MultiTesting\">\r\n            <MultiForm formSubmited={handleSubmit} formChanges={handleChange} />\r\n            {\r\n                isValid.valid ?\r\n                    <MultiTable data={data} /> :\r\n                    null\r\n            }\r\n        </section> \r\n    )\r\n}\r\n\r\nexport default MultiTest;\r\n","import React from 'react';\r\nimport './SingleForm.css';\r\n\r\nconst SingleForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.formSubmited} className=\"SingleForm\">\r\n            <div className=\"form-field\">\r\n                <label htmlFor=\"confidence\">Confidence Level</label>\r\n                <select id=\"confidence\" name=\"conf\" onChange={props.formChanges} defaultValue=\"95%\">\r\n                    <option value=\"60%\">60%</option>\r\n                    <option value=\"70%\">70%</option>\r\n                    <option value=\"80%\">80%</option>\r\n                    <option value=\"85%\">85%</option>\r\n                    <option value=\"90%\">90%</option>\r\n                    <option value=\"95%\">95%</option>\r\n                    <option value=\"98%\">98%</option>\r\n                    <option value=\"99%\">99%</option>\r\n                    <option value=\"99.8%\">99.8%</option>\r\n                    <option value=\"99.9%\">99.9%</option>\r\n                </select>\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n                <div className=\"form-field\">\r\n                    <input \r\n                        type=\"text\" \r\n                        name=\"prevBases\" \r\n                        onChange={props.formChanges}\r\n                        required \r\n                        placeholder=\"Base sizes previous wave\"></input>\r\n                </div>\r\n                <div className=\"form-field\">\r\n                    <input \r\n                        type=\"text\" \r\n                        name=\"currBases\" \r\n                        onChange={props.formChanges}\r\n                        required \r\n                        placeholder=\"Base sizes current wave\"></input>\r\n                </div>\r\n            </div>\r\n            \r\n            <div className=\"form-group\">\r\n                <div className=\"form-field\">\r\n                    <textarea \r\n                        rows=\"2\" \r\n                        name=\"prevDrivers\" \r\n                        onChange={props.formChanges}\r\n                        placeholder=\"Drivers previous wave\"></textarea>\r\n                </div>\r\n                <div className=\"form-field\">\r\n                    <textarea \r\n                        rows=\"2\" \r\n                        name=\"currDrivers\" \r\n                        onChange={props.formChanges}\r\n                        placeholder=\"Drivers current wave\"></textarea>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n                <div className=\"form-field\">\r\n                    <textarea rows=\"5\" name=\"prevPercents\" onChange={props.formChanges} required placeholder=\"Percents previous wave\"></textarea>\r\n                </div>\r\n                <div className=\"form-field\">\r\n                    <textarea rows=\"5\" name=\"currPercents\" onChange={props.formChanges} required placeholder=\"Percents current wave\"></textarea>\r\n                </div>\r\n            </div>\r\n            \r\n            <div className=\"form-field\">\r\n                <button>Calculate</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default SingleForm;\r\n","import React from 'react';\r\nimport './TableRow.css';\r\n\r\nconst TableRow = (props) => {\r\n    return (\r\n        <tr>\r\n            <td key={props.idx} >{props.driverValue}</td>  \r\n            <td >{props.prevValue}</td>\r\n            <td className={props.statColor} >{props.currValue}</td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default TableRow;\r\n","import React from 'react';\r\nimport './SingleTable.css'\r\n\r\nimport TableRow from './TableRow/TableRow';\r\n\r\nconst SingleTable = (props) => {\r\n    return (\r\n        <table className=\"SingleTable\">\r\n            <thead>\r\n                <tr>\r\n                    <th>Drivers</th>\r\n                    <th className={props.data.data.prevBase < 50 ? 'lowbase' : null}>{props.data.data.prevBase < 50 ? props.data.data.prevBase + ' *' : props.data.data.prevBase}</th>\r\n                    <th className={props.data.data.currBase < 50 ? 'lowbase' : null}>{props.data.data.currBase < 50 ? props.data.data.currBase + ' *' : props.data.data.currBase}</th>\r\n                </tr>\r\n            </thead>\r\n\r\n            <tbody>\r\n                { props.data.data.rows.map((r, i) => {\r\n                    return (\r\n                        <TableRow\r\n                            key={i}\r\n                            driverValue={props.data.data.rows[i].driver}\r\n                            prevValue={props.data.data.rows[i].prevValue}\r\n                            currValue={props.data.data.rows[i].currValue}\r\n                            statColor={props.data.data.rows[i].statColor}\r\n                            idx={i}\r\n                        />\r\n                    )\r\n                }) }\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\nexport default SingleTable;\r\n","class StatTesting {\r\n    confidenceLevels() {\r\n        return {\r\n            '60%': 0.842,\r\n            '70%': 1.036,\r\n            '80%': 1.282,\r\n            '85%': 1.44,\r\n            '90%': 1.645,\r\n            '95%': 1.96,\r\n            '98%': 2.326,\r\n            '99%': 2.576,\r\n            '99.8%': 3.091,\r\n            '99.9%': 3.291,\r\n        }\r\n    }\r\n\r\n    calcStatTest(base1, base2, perc1, perc2, confScore) {\r\n        let P = ((base1 * perc1) + (base2 * perc2)) / (base1 + base2);\r\n        let Q = 1 - P;\r\n        let Z = Math.abs((perc1 - perc2) / Math.sqrt(Math.abs(P * Q * ((1 / base1) + (1 / base2)))));\r\n        if (Z > confScore) {\r\n            if (perc1 > perc2) {\r\n                return \"red\";\r\n            } else {\r\n                return \"green\";\r\n            }\r\n        }\r\n        else {\r\n            return \"\"\r\n        }\r\n    }\r\n}\r\n\r\nexport default StatTesting;\r\n","import StatTesting from './statTesting';\r\n\r\nclass HandleRawData {\r\n    handleConf(conf) {\r\n        let confidence = new StatTesting();\r\n        let level = confidence.confidenceLevels()[conf.conf];\r\n        return level;\r\n    }\r\n\r\n    handleBase(base) {\r\n        let baseValue = Number(base.replace(/\\D+/g, ''));\r\n        return baseValue;\r\n    }\r\n\r\n    handleDrivers(drivers) {\r\n        // drivers are provided optional so check if available\r\n        if (!drivers) {\r\n            return \"\";\r\n        }\r\n        let driversArray = drivers.split(/\\n/g);\r\n        driversArray = driversArray.filter(x => x !== '');\r\n        return driversArray;\r\n    }\r\n\r\n    // the second parameter is required to check if drivers are provided and at the same time base sizes and percents values are numeric same type of writing\r\n    handlePercents(percents, currDrivers) {\r\n        let percentsArray = percents.split(/\\n/g);\r\n        percentsArray = percentsArray.filter(x => x !== '');\r\n\r\n        // check if the source data includes '%' sign and get only them if yes\r\n        let isPercentsBasedFile = percentsArray.filter(x => x.includes('%')).length > 0 ? true : false;\r\n        if (isPercentsBasedFile) {\r\n            percentsArray = percentsArray.filter(x => x.includes('%') || /-/.test(x.trim()));\r\n        } else {\r\n            percentsArray = percentsArray.filter(x => /(\\d|-|\\.)/.test(x));\r\n\r\n            // remove every odd entry in case the file is base sizes and percents as numeric values\r\n            if (currDrivers) {\r\n                if (currDrivers.length < percentsArray.length) {\r\n                    percentsArray = percentsArray.filter((x, i) => i % 2 !== 0);\r\n                }\r\n            }\r\n        }\r\n\r\n        // remove '%' symbol\r\n        percentsArray = percentsArray.map(y => y.replace(/[%]/g, '').trim());\r\n        // replace '-' only cells and map to number\r\n        percentsArray = percentsArray.map(y => {\r\n            if (y === '-') {\r\n                y = -100;\r\n            } else {\r\n                y /= 100;\r\n            }\r\n            y = +y;\r\n            return y;\r\n        });\r\n\r\n        return percentsArray;\r\n    }\r\n}\r\n\r\nexport default HandleRawData;\r\n","import StatTesting from './statTesting';\r\n\r\nclass DataObject {\r\n    generateData(conf, prevBase, currBase, prevDrivers, currDrivers, prevPercents, currPercents) {\r\n        let finalDataObject = {};\r\n        finalDataObject['prevBase'] = prevBase;\r\n        finalDataObject['currBase'] = currBase;\r\n        finalDataObject['rows'] = [];\r\n\r\n        if (prevDrivers && currDrivers) {\r\n            for (let r = 0; r < currDrivers.length; r++) {\r\n                let targetIndex = prevDrivers.indexOf(currDrivers[r]);\r\n                let tempObj = {driver: currDrivers[r], currValue: currPercents[r]};\r\n                if (targetIndex < 0) {\r\n                    tempObj['prevValue'] = -100;\r\n                } else {\r\n                    tempObj['prevValue'] = prevPercents[targetIndex];\r\n                }\r\n\r\n                finalDataObject.rows.push(tempObj);\r\n            }\r\n        } else {\r\n            // here you need to manually assure count of values in both columns should match\r\n            for (let r = 0; r < currPercents.length; r++) {\r\n                let tempObj = {driver: currDrivers[r] || \"<->\", currValue: currPercents[r], prevValue: prevPercents[r]};\r\n                finalDataObject.rows.push(tempObj);\r\n            }\r\n        }\r\n\r\n        // SET STAT TESTS\r\n        let statTesting = new StatTesting();\r\n        for (let i = 0; i < finalDataObject.rows.length; i++) {\r\n            if (finalDataObject.rows[i].prevValue === -100 || finalDataObject.rows[i].currValue === -100 || finalDataObject.rows[i].prevValue === '-' || finalDataObject.rows[i].currValue === '-') {\r\n                continue;\r\n            };\r\n            finalDataObject.rows[i]['statColor'] = statTesting.calcStatTest(prevBase, currBase, finalDataObject.rows[i].prevValue, finalDataObject.rows[i].currValue, conf)\r\n        };\r\n\r\n        // SET DATA FOR RENDERING\r\n        for (let r = 0; r < finalDataObject.rows.length; r++) {\r\n            if (finalDataObject.rows[r].prevValue === -100) {\r\n                finalDataObject.rows[r].prevValue = '-'; \r\n            } else {\r\n                finalDataObject.rows[r].prevValue = parseFloat((finalDataObject.rows[r].prevValue * 100).toFixed(7)) + ' %';\r\n            }\r\n            if (finalDataObject.rows[r].currValue === -100) {\r\n                finalDataObject.rows[r].currValue = '-'; \r\n            } else {\r\n                finalDataObject.rows[r].currValue = parseFloat((finalDataObject.rows[r].currValue * 100).toFixed(7)) + ' %';\r\n            }\r\n        }\r\n\r\n        return finalDataObject;\r\n    }\r\n}\r\n\r\nexport default DataObject;\r\n","import HandleRawData from './handleRawData';\r\nimport DataObject from './dataObject';\r\n\r\nclass FinalData {\r\n    processData(conf, prevBase, currBase, prevDrivers, currDrivers, prevPercents, currPercents) {\r\n        let handleRawData = new HandleRawData();\r\n        let fineConf = handleRawData.handleConf(conf);\r\n        let finePrevBase = handleRawData.handleBase(prevBase.prevBases);\r\n        let fineCurrBase = handleRawData.handleBase(currBase.currBases);\r\n        let finePrevDrivers = handleRawData.handleDrivers(prevDrivers.prevDrivers);\r\n        let fineCurrDrivers = handleRawData.handleDrivers(currDrivers.currDrivers);\r\n        let finePrevPercents = handleRawData.handlePercents(prevPercents.prevPercents, fineCurrDrivers);\r\n        let fineCurrPercents = handleRawData.handlePercents(currPercents.currPercents, fineCurrDrivers);\r\n\r\n        let dataObject = new DataObject();\r\n        let dataReady = dataObject.generateData(fineConf, finePrevBase, fineCurrBase, finePrevDrivers, fineCurrDrivers, finePrevPercents, fineCurrPercents);\r\n        \r\n        return {\r\n            data: dataReady\r\n        }\r\n    }\r\n}\r\n\r\nexport default FinalData;\r\n","import React, { useState } from 'react';\r\nimport './SingleTest.css';\r\n\r\nimport SingleForm from '../../components/OneVSOne/SingleForm/SingleForm';\r\nimport SingleTable from '../../components/OneVSOne/SingleTable/SingleTable';\r\nimport DataService from '../../services/single-data/finalData';\r\n\r\nconst SingleTest = () => {\r\n    const [conf, setConf] = useState({\r\n        conf: \"95%\"\r\n    });\r\n    const [prevBases, setPrevBases] = useState({\r\n        prevBases: \"\"\r\n    });\r\n    const [currBases, setCurrBases] = useState({\r\n        currBases: \"\"\r\n    });\r\n    const [prevDrivers, setPrevDrivers] = useState({\r\n        prevDrivers: \"\"\r\n    });\r\n    const [currDrivers, setCurrDrivers] = useState({\r\n        currDrivers: \"\"\r\n    });\r\n    const [prevPercents, setPrevPercents] = useState({\r\n        prevPercents: \"\"\r\n    });\r\n    const [currPercents, setCurrPercents] = useState({\r\n        currPercents: \"\"\r\n    });\r\n    const [isValid, setisValid] = useState({\r\n        valid: false\r\n    });\r\n    const [data, setData] = useState({\r\n        data: {}\r\n    });\r\n\r\n    const handleChange = (event) => {\r\n        if (event.target.name === \"conf\") {\r\n            setConf({\r\n                conf: event.target.value\r\n            });\r\n        } else if (event.target.name === \"prevBases\") {\r\n            setPrevBases({\r\n                prevBases: event.target.value\r\n            });\r\n        } else if (event.target.name === \"currBases\") {\r\n            setCurrBases({\r\n                currBases: event.target.value\r\n            });\r\n        } else if (event.target.name === \"prevDrivers\") {\r\n            setPrevDrivers({\r\n                prevDrivers: event.target.value\r\n            });\r\n        } else if (event.target.name === \"currDrivers\") {\r\n            setCurrDrivers({\r\n                currDrivers: event.target.value\r\n            });\r\n        } else if (event.target.name === \"prevPercents\") {\r\n            setPrevPercents({\r\n                prevPercents: event.target.value\r\n            });\r\n        } else if (event.target.name === \"currPercents\") {\r\n            setCurrPercents({\r\n                currPercents: event.target.value\r\n            });\r\n        }\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        let dataService = new DataService();\r\n        let wholeData = dataService.processData(conf, prevBases, currBases, prevDrivers, currDrivers, prevPercents, currPercents);\r\n        setisValid({ valid: true });\r\n        setData({data: wholeData})\r\n    }\r\n\r\n    return (\r\n        <section className=\"SingleTesting\">\r\n            <SingleForm formSubmited={handleSubmit} formChanges={handleChange} />\r\n            {\r\n                isValid.valid ?\r\n                    <SingleTable data={data.data} /> :\r\n                    null\r\n            }\r\n        </section> \r\n    )\r\n}\r\n\r\nexport default SingleTest;\r\n","import React from 'react';\nimport './App.css';\nimport { Route, Switch } from 'react-router-dom';\n\nimport Navigation from './components/Navigation/Navigation';\nimport MultiTest from './containers/multi-test/MultiTest';\nimport SingleTest from './containers/single-test/SingleTest';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navigation />\n      <Switch>\n        <Route path=\"/\" exact component={SingleTest} />\n        <Route path=\"/many-vs-many\" component={MultiTest} /> \n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nconst app = (\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n);\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}